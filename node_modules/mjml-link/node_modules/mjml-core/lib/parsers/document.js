'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Error = require('../Error');

var _compact = require('lodash/compact');

var _compact2 = _interopRequireDefault(_compact);

var _dom = require('../helpers/dom');

var _dom2 = _interopRequireDefault(_dom);

var _each = require('lodash/each');

var _each2 = _interopRequireDefault(_each);

var _filter = require('lodash/filter');

var _filter2 = _interopRequireDefault(_filter);

var _MJMLElementsCollection = require('../MJMLElementsCollection');

var _MJMLElementsCollection2 = _interopRequireDefault(_MJMLElementsCollection);

var _MJMLHead = require('../MJMLHead');

var _MJMLHead2 = _interopRequireDefault(_MJMLHead);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var regexTag = function regexTag(tag) {
  return new RegExp('<' + tag + '([^>]*)>([^]*?)</' + tag + '>', 'gmi');
};

/**
 * Avoid htmlparser to parse ending tags
 */
var safeEndingTags = function safeEndingTags(content) {
  var regexpBody = regexTag('mj-body');
  var bodyContent = content.match(regexpBody);

  if (!bodyContent) {
    return content;
  }

  bodyContent = bodyContent[0].replace('$', '&#36;'); // $ is a protected chars for regexp... avoid issue with duplicate content

  _MJMLElementsCollection.endingTags.forEach(function (tag) {
    bodyContent = bodyContent.replace(regexTag(tag), _dom2.default.replaceContentByCdata(tag));
  });

  return content.replace(regexpBody, bodyContent);
};

/**
 * converts MJML body into a JSON representation
 */
var mjmlElementParser = function mjmlElementParser(elem) {
  if (!elem) {
    throw new _Error.NullElementError('Null element found in mjmlElementParser');
  }

  var tagName = elem.tagName.toLowerCase();
  var attributes = _dom2.default.getAttributes(elem);

  var element = { tagName: tagName, attributes: attributes };

  if (!_MJMLElementsCollection2.default[tagName]) {
    (0, _warning2.default)(false, 'Unregistered element: ' + tagName + ', skipping it');
    return;
  }

  if (_MJMLElementsCollection.endingTags.indexOf(tagName) !== -1) {
    var $ = _dom2.default.parseXML(elem);
    element.content = $(tagName).html().trim();
  } else {
    var children = _dom2.default.getChildren(elem);
    element.children = children ? (0, _compact2.default)((0, _filter2.default)(children, function (child) {
      return child.tagName;
    }).map(mjmlElementParser)) : [];
  }

  return element;
};

var parseHead = function parseHead(head, attributes) {
  var $container = _dom2.default.parseHTML(attributes.container);

  (0, _each2.default)((0, _compact2.default)((0, _filter2.default)(_dom2.default.getChildren(head), function (child) {
    return child.tagName;
  })), function (element) {
    var handler = _MJMLHead2.default[element.tagName.toLowerCase()];

    if (handler) {
      handler(element, _extends({ $container: $container }, attributes));
    } else {
      (0, _warning2.default)(false, 'No handler found for: ' + element.tagName + ', in mj-head, skipping it');
    }
  });

  attributes.container = _dom2.default.getHTML($container);
};

/**
 * Import an html document containing some mjml
 * returns JSON
 *   - container: the mjml container
 *   - mjml: a json representation of the mjml
 */
var documentParser = function documentParser(content, attributes) {
  var root = void 0;
  var head = void 0;

  try {
    var $ = _dom2.default.parseXML(safeEndingTags(content));
    root = $('mjml > mj-body');
    head = $('mjml > mj-head');

    if (root.length < 1) {
      root = $('mj-body').get(0);
      (0, _warning2.default)(false, 'Please upgrade your MJML markup to add a <mjml> root tag, <mj-body> as root will no longer be supported soon, see https://github.com/mjmlio/mjml/blob/master/UPGRADE.md');
    } else {
      root = root.children().get(0);
    }
  } catch (e) {
    throw new _Error.ParseError('Error while parsing the file');
  }

  if (!root || root.length < 1) {
    throw new _Error.EmptyMJMLError('No root "<mjml>" or "<mj-body>" found in the file');
  }

  if (head && head.length === 1) {
    parseHead(head.get(0), attributes);
  }

  return mjmlElementParser(root);
};

exports.default = documentParser;