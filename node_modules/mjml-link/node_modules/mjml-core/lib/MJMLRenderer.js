'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Error = require('./Error');

var _postRender = require('./helpers/postRender');

var _mjml = require('./helpers/mjml');

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _defaultContainer = require('./configs/defaultContainer');

var _defaultContainer2 = _interopRequireDefault(_defaultContainer);

var _listFontsImports = require('./configs/listFontsImports');

var _listFontsImports2 = _interopRequireDefault(_listFontsImports);

var _he = require('he');

var _he2 = _interopRequireDefault(_he);

var _importFonts = require('./helpers/importFonts');

var _importFonts2 = _interopRequireDefault(_importFonts);

var _includeExternal = require('./includeExternal');

var _includeExternal2 = _interopRequireDefault(_includeExternal);

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _MJMLElementsCollection = require('./MJMLElementsCollection');

var _MJMLElementsCollection2 = _interopRequireDefault(_MJMLElementsCollection);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require('debug')('mjml-engine/mjml2html');

var MJMLRenderer = function () {
  function MJMLRenderer(content) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, MJMLRenderer);

    this.registerDotfile();

    this.attributes = {
      container: (0, _defaultContainer2.default)(),
      defaultAttributes: {},
      cssClasses: {},
      fonts: (0, _cloneDeep2.default)(_listFontsImports2.default)
    };

    this.content = content;
    this.options = options;

    if (typeof this.content === 'string') {
      this.content = (0, _includeExternal2.default)(this.content);
      this.parseDocument();
    }
  }

  _createClass(MJMLRenderer, [{
    key: 'registerDotfile',
    value: function registerDotfile() {
      var fs = require('fs');

      var path = process.cwd();

      try {
        fs.statSync(path + '/.mjmlconfig');
      } catch (e) {
        return (0, _warning2.default)(!(0, _isEmpty2.default)(_MJMLElementsCollection2.default), 'No .mjmlconfig found in path ' + path + ', consider to add one');
      }

      try {
        var mjmlConfig = JSON.parse(fs.readFileSync(path + '/.mjmlconfig').toString());
        var packages = mjmlConfig.packages;


        packages.forEach(function (file) {
          if (!file) {
            return;
          }

          try {
            var Component = require.main.require(file);
            (0, _MJMLElementsCollection.registerMJElement)(Component.default || Component);
          } catch (e) {
            (0, _warning2.default)(false, '.mjmlconfig file ' + file + ' opened from ' + path + ' has an error : ' + e);
          }
        });
      } catch (e) {
        (0, _warning2.default)(false, '.mjmlconfig has a ParseError: ' + e);
      }
    }
  }, {
    key: 'parseDocument',
    value: function parseDocument() {
      var documentParser = require('./parsers/document').default;

      debug('Start parsing document');
      this.content = documentParser(this.content, this.attributes);
      debug('Content parsed');
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.content) {
        throw new _Error.EmptyMJMLError('.render: No MJML to render in options ' + this.options.toString());
      }

      var rootElemComponent = _react2.default.createElement(_MJMLElementsCollection2.default[this.content.tagName], { mjml: (0, _mjml.parseInstance)(this.content, this.attributes) });

      debug('Render to static markup');
      var renderedMJML = _server2.default.renderToStaticMarkup(rootElemComponent);

      debug('React rendering done. Continue with special overrides.');
      var MJMLDocument = this.attributes.container.replace('__content__', renderedMJML);

      return this.postRender(MJMLDocument);
    }
  }, {
    key: 'postRender',
    value: function postRender(MJMLDocument) {
      var dom = require('./helpers/dom').default;

      var $ = dom.parseHTML(MJMLDocument);

      (0, _importFonts2.default)({ $: $, fonts: this.attributes.fonts });
      $ = (0, _postRender.fixLegacyAttrs)($);

      _MJMLElementsCollection.postRenders.forEach(function (postRender) {
        if (typeof postRender === 'function') {
          $ = postRender($);
        }
      });

      var finalMJMLDocument = dom.getHTML($);
      finalMJMLDocument = (0, _postRender.removeCDATA)(finalMJMLDocument);

      if (this.options.beautify) {
        var beautify = require('js-beautify').html;

        finalMJMLDocument = beautify(finalMJMLDocument, {
          indent_size: 2,
          wrap_attributes_indent_size: 2
        });
      }

      if (this.options.minify) {
        var minify = require('html-minifier').minify;

        finalMJMLDocument = minify(finalMJMLDocument, {
          collapseWhitespace: true,
          removeEmptyAttributes: true,
          minifyCSS: true
        });
      }

      finalMJMLDocument = _he2.default.decode(finalMJMLDocument);

      return finalMJMLDocument;
    }
  }]);

  return MJMLRenderer;
}();

exports.default = MJMLRenderer;